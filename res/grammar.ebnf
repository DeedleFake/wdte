    <script> -> <cexprs> Ω
  <funcmods> -> <funcmod> <funcmods>
              | ε
   <funcmod> -> memo
              | rev
              | method
  <argdecls> -> <argdecl> <argdecls>
              | ε
   <argdecl> -> id
              | [ <argdecls> ; ]
      <expr> -> <single> <args> <switch> <slot> <chain>
      <args> -> <single> <args>
              | ε
     <chain> -> -> <expr>
              | -- <expr>
              | -| <expr>
              | ε
      <slot> -> : <argdecl>
              | ε
    <single> -> number
              | string
              | <import>
              | <lambda>
              | <array>
              | <subbable>
  <subbable> -> id <sub>
              | <compound> <sub>
       <sub> -> . <subbable>
              | ε
     <array> -> [ <aexprs> ]
    <aexprs> -> <exprs>
              | ;
    <switch> -> { <switches> }
              | ε
  <compound> -> ( <cexprs> )
              | (| <cexprs> |)
     <exprs> -> <expr> ; <exprs>
              | ε
  <switches> -> <expr> => <expr> ; <switches>
              | ε
    <cexprs> -> <expr> ; <cexprs>
              | <letexpr> ; <cexprs>
              | ε
    <lambda> -> (@ <funcmods> id <argdecls> => <cexprs> )
   <letexpr> -> let <letassign>
 <letassign> -> <funcmods> id <argdecls> => <expr>
              | <argdecl> => <expr>
    <import> -> import string

# vim: ts=2 sw=2 et
